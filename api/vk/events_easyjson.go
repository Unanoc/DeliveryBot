// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vk

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeVkbotApiVk(in *jlexer.Lexer, out *MessageNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeVkbotApiVk(out *jwriter.Writer, in MessageNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PeerID))
	}
	{
		const prefix string = ",\"from_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RandomID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeVkbotApiVk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeVkbotApiVk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeVkbotApiVk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeVkbotApiVk(l, v)
}
func easyjson692db02bDecodeVkbotApiVk1(in *jlexer.Lexer, out *Confirmation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeVkbotApiVk1(out *jwriter.Writer, in Confirmation) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Confirmation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeVkbotApiVk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Confirmation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeVkbotApiVk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Confirmation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeVkbotApiVk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Confirmation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeVkbotApiVk1(l, v)
}

// UnmarshalJSON implements json.Unmarshaler interface
func (v *CallbackEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	v.UnmarshalEasyJSON(&r)
	return r.Error()
}

// UnmarshalEasyJSON implements easyjson.Unmarshaler interface
func (v *CallbackEvent) UnmarshalEasyJSON(in *jlexer.Lexer) {
	in.Delim('{')
	var vType string

	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()

		switch key {
		case "group_id":
			v.GroupID = in.Int()
		case "secret":
			v.Secret = in.String()
		case "type":
			vType = in.UnsafeString()
		case "object":
			switch vType {
			// there's no object in "confirmation"
			case "message_new":
				tmp := MessageNew{}
				tmp.UnmarshalEasyJSON(in)
				v.Event = tmp
			default:
				in.SkipRecursive()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}

	if vType == "confirmation" {
		v.Event = Confirmation{}
	}

	in.Delim('}')
}
